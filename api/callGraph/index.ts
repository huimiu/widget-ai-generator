/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";

import { Context, HttpRequest } from "@azure/functions";
import { ApiKeyLocation, ApiKeyProvider, AxiosInstance, createApiClient } from "@microsoft/teamsfx";

import config from "../config";
import example from "../example.json";
import * as prompt from "../prompt";

// Define a Response interface with a status number and a body object that can contain any key-value pairs.
interface Response {
  status: number;
  body: { [key: string]: any };
}

interface Example {
  content: string;
  role: string;
}

// Define a TeamsfxContext type as an object that can contain any key-value pairs.
type TeamsfxContext = { [key: string]: any };

/**
 * This function is the entry point for the Azure Function.
 * It handles HTTP requests from the Teams client and calls the appropriate function based on the request parameters.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 * @returns {Promise<Response>} - A promise that resolves with the HTTP response.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext,
): Promise<Response> {
  context.log("HTTP trigger function processed a request.");

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {},
  };

  // Put an echo into response body.
  res.body.receivedHTTPRequestBody = req.body || "";

  // Prepare access token.
  const accessToken: string = teamsfxContext["AccessToken"];
  if (!accessToken) {
    return {
      status: 400,
      body: {
        error: "No access token was found in request header.",
      },
    };
  }

  try {
    const result = await handleRequest(req.body);
    res.body = { ...res.body, ...result };
  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error: "Failed to process request.",
      },
    };
  }

  return res;
}

/**
 * Handles the request.
 *
 * @param {any} reqData - The request data to use (if applicable).
 * @returns {Promise<any>} - A promise that resolves with the result of the request.
 */
async function handleRequest(reqData: any): Promise<any> {
  return { completion: await codeCompletion(reqData.question) };
}

async function codeCompletion(body: string) {
  const completionReq = {
    messages: [
      {
        content: prompt.system,
        role: "system",
      },
      ...getExample(),
      {
        content: body,
        role: "user",
      },
    ],
  };
  return callOAI(completionReq);
}

async function callOAI(req: any) {
  const authProvider = new ApiKeyProvider("api-key", config.oaiApiKey, ApiKeyLocation.Header);
  const apiClient: AxiosInstance = createApiClient(config.oaiEndpoint, authProvider);
  const resp = await apiClient.post(config.oaiUrl, req);
  if (resp.status !== 200) {
    return {
      status: resp.status,
      body: resp.data,
    };
  }
  const response = resp.data.choices[0].message.content;
  return response;
}

function getExample(): Example[] {
  const examples: Example[] = [];
  example.forEach((item) => {
    examples.push({
      content: item.request,
      role: "user",
    });
    examples.push({
      content: JSON.stringify(item.response),
      role: "assistant",
    });
  });
  return examples;
}
